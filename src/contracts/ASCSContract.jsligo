type statusEnum = | ["Active"] | ["Revoked"];

type EmployeeData =
  {did: address, issuer_did: address, status: statusEnum};

type CompanyData = {did: address, status: statusEnum};

type contractData =
  {
    companyCreds: map<string, CompanyData>,
    employeeCreds: map<string, EmployeeData>,
    allowed_callers: set<address>,
    trusted_issuers: set<address>
  };

type parameter =
  | ["AddCaller", address]
  | ["RemoveCaller", address]
  | ["AddIssuer", address]
  | ["RemoveIssuer", address]
  | ["AddEmployeeCredential",


   [string,
    address]]
  | ["RevokeEmployeeCredential", string]
  | ["AddCompanyCredential",


   [string,
    address]]
  | ["RevokeCompanyCredential", string];

type storage = contractData;

type return_ =

  [list<operation>,
   storage];

const owner: address = 
  "tz1ZDSnwGrvRWDYG2sGt5vzHGQFfVAq3VxJc" as address;

const removeCaller = 
  ([id, store]: 
    [address,
     storage]): storage => {if(Tezos.get_source() != owner) {return failwith("Access denied. Only owner is allowed to remove callers.")};
   const smaller_set: set<address> = 
     Set.remove(id, store.allowed_callers);
   return {...store, allowed_callers: smaller_set}};

const addCaller = 
  ([id, store]: 
    [address,
     storage]): storage => {if(Tezos.get_source() != owner) {return failwith("Access denied. Only owner is allowed to add callers.")};
   const larger_set: set<address> = 
     Set.add(id, store.allowed_callers);
   return {...store, allowed_callers: larger_set}};

const removeIssuer = 
  ([id, store]: 
    [address,
     storage]): storage => {if(Tezos.get_source() != owner) {return failwith("Access denied. Only owner is allowed to remove issuers.")};
   const smaller_set: set<address> = 
     Set.remove(id, store.trusted_issuers);
   return {...store, trusted_issuers: smaller_set}};

const addIssuer = 
  ([id, store]: 
    [address,
     storage]): storage => {if(Tezos.get_source() != owner) {return failwith("Access denied. Only owner is allowed to add issuers.")};
   const larger_set: set<address> = 
     Set.add(id, store.trusted_issuers);
   return {...store, trusted_issuers: larger_set}};

const addEmployeeCredential = 
  ([vcId, _did, store]: 
    [string,
     address,
     storage]): storage => {if(!Set.mem(Tezos.get_source(), store.trusted_issuers)) {return failwith("Access denied. Caller is not in the list of trusted issuers.")};
   const larger_map: map<string, EmployeeData> = 
     match(Map.find_opt(vcId, store.employeeCreds), {Some: (_: EmployeeData) => 
        failwith("Entry already exists"),
      None: () => 
        Map.add(vcId, {did: _did,
         issuer_did: Tezos.get_source(),
         status: Active()}, store.employeeCreds)});
   return {...store, employeeCreds: larger_map}};

const revokeEmployeeCredential = 
  ([vcId, store]: 
    [string,
     storage]): storage => {if(!Set.mem(Tezos.get_source(), store.trusted_issuers)) {return failwith("Access denied.")};
   let updated_map: map<string, EmployeeData> = 
     match(Map.find_opt(vcId, store.employeeCreds), {None: () => 
        failwith("No entry with this VC-ID exists."),
      Some: (data: EmployeeData) => {if(Tezos.get_source() != data.issuer_did) {return failwith("Only isuer can revoke the active credentials.")};
       return Map.update(vcId as string, (Some
          (({...data, status: Revoked()}) as EmployeeData)), store.employeeCreds)}});
   return {...store, employeeCreds: updated_map}};

const addCompanyCredential = 
  ([vcId, _did, store]: 
    [string,
     address,
     storage]): storage => {if(!Set.mem(Tezos.get_source(), store.allowed_callers)) {return failwith("Access denied. Caller is not in the list of trusted issuers.")};
   const larger_map: map<string, CompanyData> = 
     match(Map.find_opt(vcId, store.companyCreds), {Some: (_: CompanyData) => 
        failwith("Entry already exists"),
      None: () => 
        Map.add(vcId, {did: _did, status: Active()}, store.companyCreds)});
   return {...store, companyCreds: larger_map}};

const revokeCompanyCredential = 
  ([vcId, store]: 
    [string,
     storage]): storage => {if(!Set.mem(Tezos.get_source(), store.allowed_callers)) {return failwith("Access denied.")};
   let updated_map: map<string, CompanyData> = 
     match(Map.find_opt(vcId, store.companyCreds), {None: () => 
        failwith("No entry with this VC-ID exists."),
      Some: (data: CompanyData) => {return Map.update(vcId
        as string, (Some
          (({...data, status: Revoked()}) as CompanyData)), store.companyCreds)}});
   return {...store, companyCreds: updated_map}};

const main = 
  ([action, store]: 
    [parameter,
     storage]): return_ => {return [(list([])
      as list<operation>),
    (match(action, {AddCaller: (id: address) => 
        addCaller([id, store]),
      RemoveCaller: (id: address) => 
        removeCaller([id, store]),
      AddIssuer: (id: address) => addIssuer([id, store]),
      RemoveIssuer: (id: address) => 
        removeIssuer([id, store]),
      AddEmployeeCredential: (p: 
         [string,
          address]) => 
        addEmployeeCredential([p[0], p[1], store]),
      RevokeEmployeeCredential: (vcId: string) => 
        revokeEmployeeCredential([vcId, store]),
      AddCompanyCredential: (p: 
         [string,
          address]) => 
        addCompanyCredential([p[0], p[1], store]),
      RevokeCompanyCredential: (vcId: string) => 
        revokeCompanyCredential([vcId, store])}))]};